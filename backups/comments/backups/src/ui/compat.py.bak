"""Rome Sorter UI - compatibility module This module offers a compatibility layer between the old monolithic GUI and the new modular UI structure. It enables a gentle migration, by offering the same interface as the old GUI, but the new ones modular components used."""

import sys
import os
import logging
from pathlib import Path
import importlib

# Configure logger
logger = logging.getLogger(__name__)

# Check whether the new UI modules are available
UI_MODULES_AVAILABLE = False
try:
    from . import ROMSorterApp, main as ui_main
    from .main_window import ROMSorterWindow
    UI_MODULES_AVAILABLE = True
    logger.info("Neue UI-Module verfügbar")
except ImportError as e:
    logger.warning(f"Neue UI-Module nicht verfügbar: {e}")

# Check whether the old GUI is available
OLD_GUI_AVAILABLE = False
try:
    from .gui import OptimizedROMSorterGUI, launch_gui as old_launch_gui
    from .gui_dnd import DND_AVAILABLE
    OLD_GUI_AVAILABLE = True
    logger.info("Alte GUI verfügbar")
except ImportError as e:
    logger.warning(f"Alte GUI nicht verfügbar: {e}")
    DND_AVAILABLE = False  # Fallback if the import fails

# Aliases for downward compatibility
if UI_MODULES_AVAILABLE:
# Use the new UI modules
    ROMSorterGUI = ROMSorterApp
    launch_gui = ui_main

# Convert old options to new options (if necessary)
    def convert_options(old_options):
        """Convert old GUI options to new UI options."""
# Implementation if necessary the conversion
        return old_options

# Compatibility wrapper for the old GUI interface
    class OptimizedROMSorterGUICompat(ROMSorterApp):
        """Compatibility class that the interface of OptimizedRomeSortergui Implemented, but used the new ROMSORTERAPP."""

        def __init__(self, *args, **kwargs):
            """Initialize the compatibility class."""
            super().__init__()
            logger.info("GUI-Kompatibilitätsmodus aktiviert")

# Here we can make additional adjustments
# To bridge the old and new API

# Add further compatibility methods here if necessary

# Replace the old class with the compatibility class
    OptimizedROMSorterGUI = OptimizedROMSorterGUICompat

else:
# If the new modules are not available, use the old GUI
    if not OLD_GUI_AVAILABLE:
# If neither the old nor the new GUI is available,
# Create Dummy implementations that throw mistakes
        class DummyGUI:
            """Dummy implementation that throws an error when used."""

            def __init__(self, *args, **kwargs):
                """Initialize the dummy class."""
                raise ImportError("Keine GUI-Implementierung verfügbar")

            def run(self):
                """Dummy implementation for run method."""
                raise ImportError("Keine GUI-Implementierung verfügbar")

        ROMSorterGUI = DummyGUI
        OptimizedROMSorterGUI = DummyGUI

        def launch_gui():
            """Dummy implementation for launch_gui."""
            raise ImportError("Keine GUI-Implementierung verfügbar")

def is_ui_available():
    """Check whether a UI implementation is available."""
    return UI_MODULES_AVAILABLE or OLD_GUI_AVAILABLE

def get_ui_mode():
    """Gives back the current UI mode."""
    if UI_MODULES_AVAILABLE:
        return "new"
    elif OLD_GUI_AVAILABLE:
        return "old"
    else:
        return "none"
