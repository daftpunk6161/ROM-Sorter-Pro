#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ROM Sorter Pro - Web-Interface

Dieses Modul implementiert ein Web-Interface für ROM Sorter Pro, das einen
Remote-Zugriff auf die Funktionen der Anwendung ermöglicht und ein modernes
Dashboard für die ROM-Verwaltung bietet.

Features:
- RESTful API für ROM-Verwaltung
- Web-basiertes Dashboard
- Remotezugriff auf ROM-Datenbank
- Unterstützung für Datei-Upload und -Download
"""

import os
import json
import logging
import threading
import webbrowser
from typing import Dict, List, Any, Optional, Tuple, Union
from pathlib import Path
import time
import hashlib
import base64
import shutil
import tempfile
import mimetypes
from datetime import datetime, timedelta

# Flask for web interface
try:
    from flask import (
        Flask, request, jsonify, send_from_directory, redirect,
        render_template_string, url_for, Response, session, send_file
    )
    from flask_cors import CORS
    HAS_FLASK = True
except ImportError:
    HAS_FLASK = False
    # Dummy class for type hints
    class Flask:
        pass

# Configure logger
logger = logging.getLogger(__name__)

# Paths for the web interface
WEB_ROOT = os.path.join(os.path.dirname(__file__), '..', '..', 'web')
STATIC_PATH = os.path.join(WEB_ROOT, 'static')
TEMPLATES_PATH = os.path.join(WEB_ROOT, 'templates')
UPLOAD_PATH = os.path.join(WEB_ROOT, 'uploads')

# Ensure directories exist
os.makedirs(STATIC_PATH, exist_ok=True)
os.makedirs(TEMPLATES_PATH, exist_ok=True)
os.makedirs(UPLOAD_PATH, exist_ok=True)

# Token management for API access
API_TOKENS = {}
TOKEN_EXPIRY = timedelta(hours=24)

# API version
API_VERSION = "1.0.0"


class WebInterfaceError(Exception):
    """Base class for web interface errors."""
    pass


class WebInterface:
    """
    Implementiert ein Web-Interface für ROM Sorter Pro.
    """

    def __init__(self, host: str = '127.0.0.1', port: int = 8080, debug: bool = False):
        """
        Initialisiert das Web-Interface.

        Args:
            host: Hostname oder IP-Adresse, auf der der Server lauscht
            port: Port, auf dem der Server lauscht
            debug: Debug-Modus aktivieren
        """
        self.host = host
        self.port = port
        self.debug = debug
        self.app = None
        self.server_thread = None
        self.is_running = False

        # Check if Flask is available
        if not HAS_FLASK:
            logger.error("Flask is not installed. The web interface is not available.")
            raise ImportError("Flask is not installed. Install it with 'pip install flask flask-cors'.")

    def _create_app(self) -> Flask:
        """
        Erstellt die Flask-Anwendung für das Web-Interface.

        Returns:
            Flask application
        """
        app = Flask(__name__,
                  static_folder=STATIC_PATH,
                  template_folder=TEMPLATES_PATH)

        # Configuration
        app.secret_key = os.urandom(24)
        app.config['UPLOAD_FOLDER'] = UPLOAD_PATH
        app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500 MB max upload

        # CORS configuration for API access
        CORS(app, resources={r"/api/*": {"origins": "*"}})

        # Enable CORS for API access
        CORS(app, resources={r"/api/*": {"origins": "*"}})

        # Routes for web pages
        @app.route('/')
        def index():
            # If an index.html file exists in the "templates" directory, use it
            if os.path.exists(os.path.join(TEMPLATES_PATH, 'index.html')):
                return render_template_string(
                    open(os.path.join(TEMPLATES_PATH, 'index.html')).read()
                )

            # Otherwise generate a simple dashboard
            return render_template_string(self._generate_dashboard_template())

        @app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method == 'POST':
                username = request.form.get('username')
                password = request.form.get('password')

                # Simple authentication - in a real application you would use
                # password hashing and secure storage
                if username == 'admin' and password == 'password':
                    session['logged_in'] = True
                    return redirect(url_for('index'))

                return render_template_string(
                    self._generate_login_template(error="Invalid login credentials")
                )

            return render_template_string(self._generate_login_template())

        @app.route('/logout')
        def logout():
            session.pop('logged_in', None)
            return redirect(url_for('login'))

        # API-Routen
        @app.route('/api/v1/status', methods=['GET'])
        def api_status():
            return jsonify({
                'status': 'online',
                'version': API_VERSION,
                'timestamp': datetime.now().isoformat()
            })

        @app.route('/api/v1/auth/token', methods=['POST'])
        def get_token():
            # Simple API token generation - in a real application you would use
            # secure authentication
            if request.json and 'api_key' in request.json:
                api_key = request.json['api_key']

                # Check API key (example)
                if api_key == 'test_key':
                    token = self._generate_token()
                    return jsonify({
                        'token': token,
                        'expires': (datetime.now() + TOKEN_EXPIRY).isoformat()
                    })

            return jsonify({'error': 'Invalid API key'}), 401

        @app.route('/api/v1/roms', methods=['GET'])
        def list_roms():
            # Check token authentication
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return jsonify({'error': 'Not authorized'}), 401

            token = auth_header[7:]  # Remove "Bearer "
            if not self._validate_token(token):
                return jsonify({'error': 'Invalid or expired token'}), 401

            # Example implementation - in a real application, the actual
            # ROM data would be retrieved from the database
            roms = [
                {'id': 1, 'name': 'Super Mario Bros.', 'platform': 'NES', 'size': 32768},
                {'id': 2, 'name': 'Sonic the Hedgehog', 'platform': 'Genesis', 'size': 524288},
                {'id': 3, 'name': 'Final Fantasy VII', 'platform': 'PlayStation', 'size': 734003200}
            ]

            return jsonify({'roms': roms})

        @app.route('/api/v1/roms/<int:rom_id>', methods=['GET'])
        def get_rom(rom_id):
            # Check token authentication
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return jsonify({'error': 'Not authorized'}), 401

            token = auth_header[7:]  # Remove "Bearer "
            if not self._validate_token(token):
                return jsonify({'error': 'Invalid or expired token'}), 401

            # Example implementation - in a real application, the actual
            # ROM data would be retrieved from the database
            roms = {
                1: {'id': 1, 'name': 'Super Mario Bros.', 'platform': 'NES', 'size': 32768},
                2: {'id': 2, 'name': 'Sonic the Hedgehog', 'platform': 'Genesis', 'size': 524288},
                3: {'id': 3, 'name': 'Final Fantasy VII', 'platform': 'PlayStation', 'size': 734003200}
            }

            if rom_id in roms:
                return jsonify(roms[rom_id])

            return jsonify({'error': 'ROM not found'}), 404

        @app.route('/api/v1/upload', methods=['POST'])
        def upload_file():
            # Check token authentication
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return jsonify({'error': 'Not authorized'}), 401

            token = auth_header[7:]  # Remove "Bearer "
            if not self._validate_token(token):
                return jsonify({'error': 'Invalid or expired token'}), 401

            # Check if a file is in the request
            if 'file' not in request.files:
                return jsonify({'error': 'No file in request'}), 400

            file = request.files['file']

            # Check if a filename was selected
            if file.filename == '':
                return jsonify({'error': 'No filename selected'}), 400

            # Save the file if it exists
            if file:
                filename = os.path.basename(file.filename)
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(filepath)

                return jsonify({
                    'success': True,
                    'filename': filename,
                    'size': os.path.getsize(filepath)
                })

            return jsonify({'error': 'Fehler beim Hochladen der Datei'}), 500

        # Fehlerbehandlung
        @app.errorhandler(404)
        def not_found(error):
            return jsonify({'error': 'Nicht gefunden'}), 404

        @app.errorhandler(500)
        def server_error(error):
            return jsonify({'error': 'Serverfehler'}), 500

        return app

    def _generate_dashboard_template(self) -> str:
        """
        Generiert ein einfaches Dashboard-Template.

        Returns:
            HTML-Template als String
        """
        return """
        <!DOCTYPE html>
        <html lang="de">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ROM Sorter Pro - Dashboard</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: #f5f5f5;
                    color: #333;
                }
                header {
                    background-color: #2c3e50;
                    color: white;
                    padding: 1rem;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 1rem;
                }
                .dashboard {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                    gap: 1rem;
                    margin-top: 1rem;
                }
                .card {
                    background-color: white;
                    border-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                    padding: 1rem;
                    transition: transform 0.3s ease;
                }
                .card:hover {
                    transform: translateY(-5px);
                }
                .card h3 {
                    margin-top: 0;
                    color: #2c3e50;
                }
                .footer {
                    margin-top: 2rem;
                    padding: 1rem;
                    text-align: center;
                    color: #666;
                    font-size: 0.8rem;
                }
                .upload-area {
                    border: 2px dashed #ccc;
                    border-radius: 5px;
                    padding: 2rem;
                    text-align: center;
                    margin: 1rem 0;
                    background-color: #f9f9f9;
                    cursor: pointer;
                }
                .upload-area:hover {
                    border-color: #2c3e50;
                    background-color: #f0f0f0;
                }
                button {
                    background-color: #2c3e50;
                    color: white;
                    border: none;
                    padding: 0.5rem 1rem;
                    border-radius: 3px;
                    cursor: pointer;
                    font-size: 1rem;
                    transition: background-color 0.3s ease;
                }
                button:hover {
                    background-color: #1a252f;
                }
                input[type="file"] {
                    display: none;
                }
            </style>
        </head>
        <body>
            <header>
                <div class="container">
                    <h1>ROM Sorter Pro</h1>
                    <p>Web-Interface für ROM-Verwaltung</p>
                </div>
            </header>

            <div class="container">
                <h2>Dashboard</h2>

                <div class="upload-area" id="uploadArea">
                    <h3>ROMs hochladen</h3>
                    <p>Ziehe Dateien hierher oder klicke, um Dateien auszuwählen</p>
                    <input type="file" id="fileInput" multiple>
                    <button id="uploadButton">Dateien auswählen</button>
                </div>

                <div class="dashboard">
                    <div class="card">
                        <h3>Statistiken</h3>
                        <p>Gesamtanzahl ROMs: <strong>0</strong></p>
                        <p>Sortierte ROMs: <strong>0</strong></p>
                        <p>Nicht erkannte ROMs: <strong>0</strong></p>
                    </div>

                    <div class="card">
                        <h3>Neueste Aktivität</h3>
                        <p>Keine Aktivität vorhanden</p>
                    </div>

                    <div class="card">
                        <h3>API-Status</h3>
                        <p>Status: <span id="apiStatus">Prüfe...</span></p>
                        <p>Version: <span id="apiVersion">-</span></p>
                        <button id="checkApiButton">API prüfen</button>
                    </div>
                </div>
            </div>

            <footer class="footer">
                <p>ROM Sorter Pro &copy; 2023 | Web-Interface Version 1.0.0</p>
            </footer>

            <script>
                // JavaScript für Dashboard-Funktionalität
                document.addEventListener('DOMContentLoaded', function() {
                    // Upload-Bereich
                    const uploadArea = document.getElementById('uploadArea');
                    const fileInput = document.getElementById('fileInput');
                    const uploadButton = document.getElementById('uploadButton');

                    uploadArea.addEventListener('dragover', function(e) {
                        e.preventDefault();
                        uploadArea.style.borderColor = '#2c3e50';
                        uploadArea.style.backgroundColor = '#f0f0f0';
                    });

                    uploadArea.addEventListener('dragleave', function() {
                        uploadArea.style.borderColor = '#ccc';
                        uploadArea.style.backgroundColor = '#f9f9f9';
                    });

                    uploadArea.addEventListener('drop', function(e) {
                        e.preventDefault();
                        uploadArea.style.borderColor = '#ccc';
                        uploadArea.style.backgroundColor = '#f9f9f9';

                        const files = e.dataTransfer.files;
                        handleFiles(files);
                    });

                    uploadButton.addEventListener('click', function() {
                        fileInput.click();
                    });

                    fileInput.addEventListener('change', function() {
                        handleFiles(fileInput.files);
                    });

                    function handleFiles(files) {
                        if (files.length === 0) return;

                        // In einer echten Anwendung würde hier der Upload über AJAX erfolgen
                        console.log(`${files.length} Dateien ausgewählt`);
                        alert(`${files.length} Dateien wurden ausgewählt. In einer echten Anwendung würden diese jetzt hochgeladen werden.`);
                    }

                    // API-Status prüfen
                    const checkApiButton = document.getElementById('checkApiButton');
                    checkApiButton.addEventListener('click', checkApiStatus);

                    // API-Status beim Laden prüfen
                    checkApiStatus();

                    function checkApiStatus() {
                        const apiStatus = document.getElementById('apiStatus');
                        const apiVersion = document.getElementById('apiVersion');

                        apiStatus.textContent = 'Checking...';
                        apiVersion.textContent = '-';

                        fetch('/api/v1/status')
                            .then(response => response.json())
                            .then(data => {
                                apiStatus.textContent = data.status;
                                apiVersion.textContent = data.version;
                                apiStatus.style.color = 'green';
                            })
                            .catch(error => {
                                console.error('Error checking API status:', error);
                                apiStatus.textContent = 'Offline';
                                apiStatus.style.color = 'red';
                            });
                    }
                });
            </script>
        </body>
        </html>
        """

    def _generate_login_template(self, error: str = None) -> str:
        """
        Generiert ein einfaches Login-Template.

        Args:
            error: Optionale Fehlermeldung

        Returns:
            HTML-Template als String
        """
        return f"""
        <!DOCTYPE html>
        <html lang="de">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ROM Sorter Pro - Login</title>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: #f5f5f5;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                }}
                .login-container {{
                    background-color: white;
                    border-radius: 5px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    padding: 2rem;
                    width: 100%;
                    max-width: 400px;
                }}
                .login-container h1 {{
                    margin-top: 0;
                    color: #2c3e50;
                    text-align: center;
                }}
                .form-group {{
                    margin-bottom: 1rem;
                }}
                label {{
                    display: block;
                    margin-bottom: 0.5rem;
                    color: #333;
                }}
                input {{
                    width: 100%;
                    padding: 0.5rem;
                    border: 1px solid #ddd;
                    border-radius: 3px;
                    font-size: 1rem;
                }}
                button {{
                    width: 100%;
                    background-color: #2c3e50;
                    color: white;
                    border: none;
                    padding: 0.75rem;
                    border-radius: 3px;
                    cursor: pointer;
                    font-size: 1rem;
                    margin-top: 1rem;
                }}
                button:hover {{
                    background-color: #1a252f;
                }}
                .error-message {{
                    color: #e74c3c;
                    margin-bottom: 1rem;
                    text-align: center;
                }}
            </style>
        </head>
        <body>
            <div class="login-container">
                <h1>ROM Sorter Pro</h1>

                {f'<div class="error-message">{error}</div>' if error else ''}

                <form action="/login" method="post">
                    <div class="form-group">
                        <label for="username">Benutzername</label>
                        <input type="text" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Passwort</label>
                        <input type="password" id="password" name="password" required>
                    </div>
                    <button type="submit">Anmelden</button>
                </form>
            </div>
        </body>
        </html>
        """

    def _generate_token(self) -> str:
        """
        Generiert ein API-Token.

        Returns:
            API-Token
        """
        # Simple token generation - in a real application you would
        # use a more secure method
        token = base64.b64encode(os.urandom(32)).decode('utf-8')
        API_TOKENS[token] = datetime.now() + TOKEN_EXPIRY
        return token

    def _validate_token(self, token: str) -> bool:
        """
        Validiert ein API-Token.

        Args:
            token: Zu validierendes Token

        Returns:
            True, wenn das Token gültig ist, sonst False
        """
        if token not in API_TOKENS:
            return False

        expiry = API_TOKENS[token]
        if datetime.now() > expiry:
            # Token ist abgelaufen
            del API_TOKENS[token]
            return False

        return True

    def start(self) -> None:
        """Startet den Web-Server in einem separaten Thread."""
        if self.is_running:
            logger.warning("Web interface is already running")
            return

        try:
            self.app = self._create_app()

            def run_server():
                self.app.run(host=self.host, port=self.port, debug=self.debug)

            # Starte den Server in einem separaten Thread
            self.server_thread = threading.Thread(target=run_server)
            self.server_thread.daemon = True
            self.server_thread.start()

            self.is_running = True
            logger.info(f"Web-Interface gestartet auf http://{self.host}:{self.port}")

            # Warte kurz, um sicherzustellen, dass der Server gestartet ist
            time.sleep(1)

            # Open the browser if the server is running on localhost
            if self.host in ['127.0.0.1', 'localhost']:
                webbrowser.open(f"http://{self.host}:{self.port}")

        except Exception as e:
            logger.error(f"Fehler beim Starten des Web-Interface: {e}")
            raise WebInterfaceError(f"Fehler beim Starten des Web-Interface: {e}")

    def stop(self) -> None:
        """Stoppt den Web-Server."""
        if not self.is_running:
            logger.warning("Web interface is not running")
            return

        # Flask doesn't have a simple way to stop the server
        # In a real application, you would implement a shutdown function here
        self.is_running = False
        logger.info("Web interface stopped")


def start_web_interface(host: str = '127.0.0.1', port: int = 8080,
                       open_browser: bool = True) -> WebInterface:
    """
    Startet das Web-Interface für ROM Sorter Pro.

    Args:
        host: Hostname oder IP-Adresse, auf der der Server lauscht
        port: Port, auf dem der Server lauscht
        open_browser: Ob der Browser automatisch geöffnet werden soll

    Returns:
        WebInterface-Instanz
    """
    # Check if Flask is installed
    if not HAS_FLASK:
        logger.error("Flask is not installed. The web interface is not available.")
        raise ImportError("Flask is not installed. Install it with 'pip install flask flask-cors'.")

    web_interface = WebInterface(host=host, port=port, debug=False)
    web_interface.start()

    return web_interface


# Example for using the web interface
if __name__ == "__main__":
    # Configure logging
    logging.basicConfig(level=logging.INFO,
                      format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    try:
        # Start the web interface
        web_interface = start_web_interface()

        # Keep the program running until interrupted
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nStopping the web interface...")
            web_interface.stop()

    except ImportError as e:
        print(f"Error: {e}")
        print("Install Flask with: pip install flask flask-cors")

    except WebInterfaceError as e:
        print(f"Error: {e}")

    except Exception as e:
        print(f"Unexpected error: {e}")
