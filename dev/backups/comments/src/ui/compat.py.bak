"""
ROM Sorter UI - Kompatibilitätsmodul

Dieses Modul bietet eine Kompatibilitätsschicht zwischen der alten monolithischen GUI
und der neuen modularen UI-Struktur. Es ermöglicht eine sanfte Migration,
indem es die gleiche Schnittstelle wie die alte GUI bietet, aber die neuen
modularen Komponenten verwendet.
"""

import sys
import os
import logging
from pathlib import Path
import importlib

# Logger konfigurieren
logger = logging.getLogger(__name__)

# Überprüfe, ob die neuen UI-Module verfügbar sind
UI_MODULES_AVAILABLE = False
try:
    from . import ROMSorterApp, main as ui_main
    from .main_window import ROMSorterWindow
    UI_MODULES_AVAILABLE = True
    logger.info("Neue UI-Module verfügbar")
except ImportError as e:
    logger.warning(f"Neue UI-Module nicht verfügbar: {e}")

# Überprüfe, ob die alte GUI verfügbar ist
OLD_GUI_AVAILABLE = False
try:
    from .gui import OptimizedROMSorterGUI, launch_gui as old_launch_gui
    OLD_GUI_AVAILABLE = True
    logger.info("Alte GUI verfügbar")
except ImportError as e:
    logger.warning(f"Alte GUI nicht verfügbar: {e}")

# Aliase für Abwärtskompatibilität
if UI_MODULES_AVAILABLE:
    # Verwende die neuen UI-Module
    ROMSorterGUI = ROMSorterApp
    launch_gui = ui_main

    # Konvertiere alte Optionen zu neuen Optionen (falls nötig)
    def convert_options(old_options):
        """Konvertiere alte GUI-Optionen zu neuen UI-Optionen."""
        # Implementiere bei Bedarf die Konvertierung
        return old_options

    # Kompatibilitätswrapper für die alte GUI-Schnittstelle
    class OptimizedROMSorterGUICompat(ROMSorterApp):
        """
        Kompatibilitätsklasse, die die Schnittstelle von OptimizedROMSorterGUI
        implementiert, aber die neue ROMSorterApp verwendet.
        """

        def __init__(self, *args, **kwargs):
            """Initialisiere die Kompatibilitätsklasse."""
            super().__init__()
            logger.info("GUI-Kompatibilitätsmodus aktiviert")

            # Hier können wir zusätzliche Anpassungen vornehmen,
            # um die alte und neue API zu überbrücken

        # Füge hier bei Bedarf weitere Kompatibilitätsmethoden hinzu

    # Ersetze die alte Klasse durch die Kompatibilitätsklasse
    OptimizedROMSorterGUI = OptimizedROMSorterGUICompat

else:
    # Wenn die neuen Module nicht verfügbar sind, verwende die alte GUI
    if not OLD_GUI_AVAILABLE:
        # Wenn weder die alte noch die neue GUI verfügbar ist,
        # erstelle Dummy-Implementierungen, die Fehler werfen
        class DummyGUI:
            """Dummy-Implementierung, die einen Fehler wirft, wenn sie verwendet wird."""

            def __init__(self, *args, **kwargs):
                """Initialisiere die Dummy-Klasse."""
                raise ImportError("Keine GUI-Implementierung verfügbar")

            def run(self):
                """Dummy-Implementierung für run-Methode."""
                raise ImportError("Keine GUI-Implementierung verfügbar")

        ROMSorterGUI = DummyGUI
        OptimizedROMSorterGUI = DummyGUI

        def launch_gui():
            """Dummy-Implementierung für launch_gui."""
            raise ImportError("Keine GUI-Implementierung verfügbar")

def is_ui_available():
    """Überprüft, ob eine UI-Implementierung verfügbar ist."""
    return UI_MODULES_AVAILABLE or OLD_GUI_AVAILABLE

def get_ui_mode():
    """Gibt den aktuellen UI-Modus zurück."""
    if UI_MODULES_AVAILABLE:
        return "new"
    elif OLD_GUI_AVAILABLE:
        return "old"
    else:
        return "none"
